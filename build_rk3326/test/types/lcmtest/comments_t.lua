--[[
LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
--]]

local lcm = require('lcm')

local setmetatable = setmetatable
local ipairs = ipairs
local table = table
local string = string
local unpack = unpack

-- buffer helper for decoding
local _buffer_helper = {}
_buffer_helper.__index = _buffer_helper

function _buffer_helper:new(data_str)

  local obj = {buffer = data_str, index = 1}
  setmetatable(obj, self)

  return obj
end

function _buffer_helper:read(n_bytes)

  local partial = self.buffer:sub(self.index, self.index + n_bytes - 1)
  self.index = self.index + n_bytes

  if self.index > #self.buffer + 1 then
    error('buffer ran out of bytes')
  end

  return partial
end

local comments_t = {}
comments_t.__index = comments_t

  comments_t.const_field = 5

comments_t.name = 'lcmtest.comments_t'
comments_t.packagename = 'lcmtest'
comments_t.shortname = 'comments_t'

function comments_t:new()

  local obj = {}

  obj.field_a = 0
  obj.field_b = 0
  obj.field_c = 0
  obj.field_d = 0
  obj.field_e = 0.0
  obj.array = {}

  setmetatable(obj, self)

  return obj
end

function comments_t._get_hash_recursive(parents)

  local newparents = {}

  for _, v in ipairs(parents) do
    if v == comments_t then return lcm._hash.new('0x0') end
    table.insert(newparents, v)
  end

  table.insert(newparents, comments_t)

  local hash = lcm._hash.new('0x4c8ffa86357c7d7e')
  hash:rotate(1)

  return hash
end

comments_t._packed_fingerprint = lcm._pack.pack('>X', comments_t._get_hash_recursive({}))

function comments_t:encode()

  return comments_t._packed_fingerprint .. self:_encode_one()
end

function comments_t:_encode_one()

  local buf_table = {}

  table.insert(buf_table, lcm._pack.pack('>bhiqf', self.field_a, self.field_b, self.field_c, self.field_d, self.field_e))
  table.insert(buf_table, lcm._pack.pack(string.format('>%di', self.field_a), unpack(self.array)))

  return table.concat(buf_table)
end

function comments_t.decode(data)

  if data:sub(1, 8) ~= comments_t._packed_fingerprint then
    error('bad fingerprint')
  end

  return comments_t._decode_one(data:sub(9))
end

function comments_t._decode_one(data)

  if not data.read then
    data = _buffer_helper:new(data)
  end

  local obj = comments_t:new()

  obj.field_a, obj.field_b, obj.field_c, obj.field_d, obj.field_e = lcm._pack.unpack('>bhiqf', data:read(19))
  obj.array = {lcm._pack.unpack(string.format('>%di', obj.field_a), data:read(obj.field_a * 4))}

  return obj
end

return comments_t

