--[[
LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
--]]

local lcm = require('lcm')

local lcmtest_primitives_t = require('lcmtest.primitives_t')

local setmetatable = setmetatable
local ipairs = ipairs
local table = table
local string = string
local unpack = unpack

-- buffer helper for decoding
local _buffer_helper = {}
_buffer_helper.__index = _buffer_helper

function _buffer_helper:new(data_str)

  local obj = {buffer = data_str, index = 1}
  setmetatable(obj, self)

  return obj
end

function _buffer_helper:read(n_bytes)

  local partial = self.buffer:sub(self.index, self.index + n_bytes - 1)
  self.index = self.index + n_bytes

  if self.index > #self.buffer + 1 then
    error('buffer ran out of bytes')
  end

  return partial
end

local primitives_list_t = {}
primitives_list_t.__index = primitives_list_t

primitives_list_t.name = 'lcmtest.primitives_list_t'
primitives_list_t.packagename = 'lcmtest'
primitives_list_t.shortname = 'primitives_list_t'

function primitives_list_t:new()

  local obj = {}

  obj.num_items = 0
  obj.items = {}

  setmetatable(obj, self)

  return obj
end

function primitives_list_t._get_hash_recursive(parents)

  local newparents = {}

  for _, v in ipairs(parents) do
    if v == primitives_list_t then return lcm._hash.new('0x0') end
    table.insert(newparents, v)
  end

  table.insert(newparents, primitives_list_t)

  local hash = lcm._hash.new('0xaedf3d0724cd948b')
    + lcmtest_primitives_t._get_hash_recursive(newparents)
  hash:rotate(1)

  return hash
end

primitives_list_t._packed_fingerprint = lcm._pack.pack('>X', primitives_list_t._get_hash_recursive({}))

function primitives_list_t:encode()

  return primitives_list_t._packed_fingerprint .. self:_encode_one()
end

function primitives_list_t:_encode_one()

  local buf_table = {}

  table.insert(buf_table, lcm._pack.pack('>i', self.num_items))
  for i0 = 1, self.num_items do
    table.insert(buf_table, self.items[i0]:_encode_one())
  end

  return table.concat(buf_table)
end

function primitives_list_t.decode(data)

  if data:sub(1, 8) ~= primitives_list_t._packed_fingerprint then
    error('bad fingerprint')
  end

  return primitives_list_t._decode_one(data:sub(9))
end

function primitives_list_t._decode_one(data)

  if not data.read then
    data = _buffer_helper:new(data)
  end

  local obj = primitives_list_t:new()

  obj.num_items = lcm._pack.unpack('>i', data:read(4))
  obj.items = {}
  for i0 = 1, obj.num_items do
    obj.items[i0] = lcmtest_primitives_t._decode_one(data)
  end

  return obj
end

return primitives_list_t

