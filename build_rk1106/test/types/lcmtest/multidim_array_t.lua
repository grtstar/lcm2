--[[
LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
--]]

local lcm = require('lcm')

local setmetatable = setmetatable
local ipairs = ipairs
local table = table
local string = string
local unpack = unpack

-- buffer helper for decoding
local _buffer_helper = {}
_buffer_helper.__index = _buffer_helper

function _buffer_helper:new(data_str)

  local obj = {buffer = data_str, index = 1}
  setmetatable(obj, self)

  return obj
end

function _buffer_helper:read(n_bytes)

  local partial = self.buffer:sub(self.index, self.index + n_bytes - 1)
  self.index = self.index + n_bytes

  if self.index > #self.buffer + 1 then
    error('buffer ran out of bytes')
  end

  return partial
end

local multidim_array_t = {}
multidim_array_t.__index = multidim_array_t

multidim_array_t.name = 'lcmtest.multidim_array_t'
multidim_array_t.packagename = 'lcmtest'
multidim_array_t.shortname = 'multidim_array_t'

function multidim_array_t:new()

  local obj = {}

  obj.size_a = 0
  obj.size_b = 0
  obj.size_c = 0
  obj.data = {}
  obj.strarray = {}
  for d0 = 1, 2 do
    obj.strarray[d0] = {}
  end

  setmetatable(obj, self)

  return obj
end

function multidim_array_t._get_hash_recursive(parents)

  local newparents = {}

  for _, v in ipairs(parents) do
    if v == multidim_array_t then return lcm._hash.new('0x0') end
    table.insert(newparents, v)
  end

  table.insert(newparents, multidim_array_t)

  local hash = lcm._hash.new('0x1e012473deb4cfbb')
  hash:rotate(1)

  return hash
end

multidim_array_t._packed_fingerprint = lcm._pack.pack('>X', multidim_array_t._get_hash_recursive({}))

function multidim_array_t:encode()

  return multidim_array_t._packed_fingerprint .. self:_encode_one()
end

function multidim_array_t:_encode_one()

  local buf_table = {}

  table.insert(buf_table, lcm._pack.pack('>iii', self.size_a, self.size_b, self.size_c))
  for i0 = 1, self.size_a do
    for i1 = 1, self.size_b do
      table.insert(buf_table, lcm._pack.pack(string.format('>%di', self.size_c), unpack(self.data[i0][i1])))
    end
  end
  for i0 = 1, 2 do
    for i1 = 1, self.size_c do
      local __strarray_tmpstr = lcm._pack.prepare_string(self.strarray[i0][i1])
      table.insert(buf_table, lcm._pack.pack('>I', #__strarray_tmpstr + 1))
      table.insert(buf_table, __strarray_tmpstr .. '\0')
    end
  end

  return table.concat(buf_table)
end

function multidim_array_t.decode(data)

  if data:sub(1, 8) ~= multidim_array_t._packed_fingerprint then
    error('bad fingerprint')
  end

  return multidim_array_t._decode_one(data:sub(9))
end

function multidim_array_t._decode_one(data)

  if not data.read then
    data = _buffer_helper:new(data)
  end

  local obj = multidim_array_t:new()

  obj.size_a, obj.size_b, obj.size_c = lcm._pack.unpack('>iii', data:read(12))
  obj.data = {}
  for i0 = 1, obj.size_a do
    obj.data[i0] = {}
    for i1 = 1, obj.size_b do
      obj.data[i0][i1] = {lcm._pack.unpack(string.format('>%di', obj.size_c), data:read(obj.size_c * 4))}
    end
  end
  obj.strarray = {}
  for i0 = 1, 2 do
    obj.strarray[i0] = {}
    for i1 = 1, obj.size_c do
      local __strarray_tmpstrlen = lcm._pack.unpack('>I', data:read(4))
      obj.strarray[i0][i1] = lcm._pack.prepare_string(data:read(__strarray_tmpstrlen))
    end
  end

  return obj
end

return multidim_array_t

