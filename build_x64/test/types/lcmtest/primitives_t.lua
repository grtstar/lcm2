--[[
LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
--]]

local lcm = require('lcm')

local setmetatable = setmetatable
local ipairs = ipairs
local table = table
local string = string
local unpack = unpack

-- buffer helper for decoding
local _buffer_helper = {}
_buffer_helper.__index = _buffer_helper

function _buffer_helper:new(data_str)

  local obj = {buffer = data_str, index = 1}
  setmetatable(obj, self)

  return obj
end

function _buffer_helper:read(n_bytes)

  local partial = self.buffer:sub(self.index, self.index + n_bytes - 1)
  self.index = self.index + n_bytes

  if self.index > #self.buffer + 1 then
    error('buffer ran out of bytes')
  end

  return partial
end

local primitives_t = {}
primitives_t.__index = primitives_t

primitives_t.name = 'lcmtest.primitives_t'
primitives_t.packagename = 'lcmtest'
primitives_t.shortname = 'primitives_t'

function primitives_t:new()

  local obj = {}

  obj.i8 = 0
  obj.i16 = 0
  obj.num_ranges = 0
  obj.i64 = 0
  obj.ranges = {}
  obj.position = {}
  for d0 = 1, 3 do
    obj.position[d0] = 0.0
  end
  obj.orientation = {}
  for d0 = 1, 4 do
    obj.orientation[d0] = 0.0
  end
  obj.name = ''
  obj.enabled = false

  setmetatable(obj, self)

  return obj
end

function primitives_t._get_hash_recursive(parents)

  local newparents = {}

  for _, v in ipairs(parents) do
    if v == primitives_t then return lcm._hash.new('0x0') end
    table.insert(newparents, v)
  end

  table.insert(newparents, primitives_t)

  local hash = lcm._hash.new('0xc2731598914f36aa')
  hash:rotate(1)

  return hash
end

primitives_t._packed_fingerprint = lcm._pack.pack('>X', primitives_t._get_hash_recursive({}))

function primitives_t:encode()

  return primitives_t._packed_fingerprint .. self:_encode_one()
end

function primitives_t:_encode_one()

  local buf_table = {}

  table.insert(buf_table, lcm._pack.pack('>bhiq', self.i8, self.i16, self.num_ranges, self.i64))
  table.insert(buf_table, lcm._pack.pack(string.format('>%dh', self.num_ranges), unpack(self.ranges)))
  table.insert(buf_table, lcm._pack.pack('>3f', unpack(self.position)))
  table.insert(buf_table, lcm._pack.pack('>4d', unpack(self.orientation)))
  local __name_tmpstr = lcm._pack.prepare_string(self.name)
  table.insert(buf_table, lcm._pack.pack('>I', #__name_tmpstr + 1))
  table.insert(buf_table, __name_tmpstr .. '\0')
  table.insert(buf_table, lcm._pack.pack('>?', self.enabled))

  return table.concat(buf_table)
end

function primitives_t.decode(data)

  if data:sub(1, 8) ~= primitives_t._packed_fingerprint then
    error('bad fingerprint')
  end

  return primitives_t._decode_one(data:sub(9))
end

function primitives_t._decode_one(data)

  if not data.read then
    data = _buffer_helper:new(data)
  end

  local obj = primitives_t:new()

  obj.i8, obj.i16, obj.num_ranges, obj.i64 = lcm._pack.unpack('>bhiq', data:read(15))
  obj.ranges = {lcm._pack.unpack(string.format('>%dh', obj.num_ranges), data:read(obj.num_ranges * 2))}
  obj.position = {lcm._pack.unpack('>3f', data:read(12))}
  obj.orientation = {lcm._pack.unpack('>4d', data:read(32))}
  local __name_tmpstrlen = lcm._pack.unpack('>I', data:read(4))
  obj.name = lcm._pack.prepare_string(data:read(__name_tmpstrlen))
  obj.enabled = lcm._pack.unpack('>?', data:read(1))

  return obj
end

return primitives_t

